/*

In this file:

// A. Modules
// B. Variables
// C. Matrix Block
// D. Matrix Modifiers
// E. Matrix Cell Utilities and Modifiers
// F. Grid Block
// G. Grid Divider Modifier
// H. Gap Utilities
// I. Order Utilities

*/

//////////////////////////////////////////////
// A. Modules
//////////////////////////////////////////////

@use "sass:map";
@use "sass:math";
@use "../breakpoints/style" as breakpoints;
@use "../spacing/style" as spacing;

//////////////////////////////////////////////
// B. Variables
//////////////////////////////////////////////

$columns: 12;
$rows: math.div($columns, 2);

// Scoped to Block

%grid-divider-vars {
    --grid-divider-gap: var(--spacer-3);

    --grid-divider-border-width: var(--default-border-width);
    --grid-divider-border-width: var(--default-border-width);

    --grid-divider-border-x-color: var(--canvas-border);
    --grid-divider-border-y-color: var(--canvas-border);
}

//////////////////////////////////////////////
// C. Matrix Block
//////////////////////////////////////////////

.matrix {
    display: flex;
    flex-wrap: wrap;
    min-width: 100%;
}

[class*="matrix__cell"] {
    flex: 1 1 100%;
    max-width: 100%;
}

//////////////////////////////////////////////
// D. Matrix Modifiers
//////////////////////////////////////////////

@each $breakpoint in map.keys(breakpoints.$breakpoints) {
    @include breakpoints.breakpoints-up($breakpoint) {
        $mod: breakpoints.breakpoint-modifier($breakpoint, breakpoints.$breakpoints);

        .matrix--cell-fill#{$mod} > [class*="matrix__cell"] {
            flex: 1;
        }

        .matrix--cell-fit#{$mod} > [class*="matrix__cell"] {
            flex: none;
        }
        
        @for $i from 1 through $columns {
            .matrix--cell-#{$i}#{$mod} > [class*="matrix__cell"] {
                flex: 0 0 math.div(100%, $columns) * $i;
                max-width: math.div(100%, $columns) * $i;
            }
        }
    }
}

//////////////////////////////////////////////
// E. Matrix Cell Utilities and Modifiers
//////////////////////////////////////////////

@each $breakpoint in map.keys(breakpoints.$breakpoints) {
    @include breakpoints.breakpoints-up($breakpoint) {
        $mod: breakpoints.breakpoint-modifier($breakpoint, breakpoints.$breakpoints);

        @for $i from 1 through $columns {
            .matrix > .matrix__cell.matrix--cell-#{$i}#{$mod} {
                flex: 0 0 math.div(100%, $columns) * $i;
                max-width: math.div(100%, $columns) * $i;
            }
        }

        .matrix > .matrix__cell.matrix--cell-fill#{$mod} {
            flex: 1 !important;
            max-width: unset;
        }
        
        .matrix > .matrix__cell.matrix--cell-fit#{$mod} {
            flex: none;
            max-width: unset;
        }
    }
}

//////////////////////////////////////////////
// F. Grid Block
////////////////////////////////////////////// 

.grid {
    display: grid;
    
    list-style: none;

    &[class*="gap"] {
        gap: var(--gap-size);
    }
    
    > .form-entry {
        margin: unset;
    }
}

[class*="grid--column"] {
    --columns: initial;
    grid-template-columns: repeat(var(--columns), 1fr);
}

@each $breakpoint in map.keys(breakpoints.$breakpoints) {
    @include breakpoints.breakpoints-up($breakpoint) {
        $mod: breakpoints.breakpoint-modifier($breakpoint, breakpoints.$breakpoints);

        @for $i from 1 through $columns {

            .grid--column-#{$i}#{$mod} {
                --columns: #{$i} !important;
            }

            .grid__colspan-#{$i}#{$mod}{
                grid-column: span #{$i};
            }
        }

        @for $i from 2 through $rows {
            
            .grid__rowspan-#{$i}#{$mod}{
                grid-row: span #{$i};
            }
        }

    }
}

//////////////////////////////////////////////
// G. Grid Divider Modifier
//////////////////////////////////////////////
 
[class*="grid--divider"] {
    @extend %grid-divider-vars;
    --gap: var(--gap-size, var(--grid-divider-gap));
}

[class*="grid--divider"],
[class*="grid--divider"] > * {
    position: relative;
}

[class*="grid--divider"] {
    --divider-x-width: 100%;
    --divider-x-height: var(--grid-divider-border-width);
    --divider-y-width: var(--grid-divider-border-width);
    --divider-y-height: 100%;

    gap: var(--gap);

    overflow: hidden;

    > * {
        &::before,
        &::after {
            --shift-divider: calc(var(--gap) * 0.5);
            --shift-border: calc(var(--grid-divider-border-width) * 0.5);

            position: absolute;
            content: "";
        }
    }

    > *::before {
        inset-block-start: 100%;
        inset-inline-start: 0;

        width: var(--divider-x-width);

        height: var(--grid-divider-border-width);

        margin-block-start: calc( var(--shift-divider) - var(--shift-border));
        
        background-color: var(--grid-divider-border-x-color); 

    }

    > *::after {
        inset-block-start: 0;
        inset-inline-end: 0;

        height: var(--divider-y-height);

        width: var(--grid-divider-border-width);

        margin-inline-end: calc( calc(var(--shift-divider) + var(--shift-border)) * -1 );

        background-color: var(--grid-divider-border-y-color); 
    }
}

.grid--divider--fill-x {
    --divider-x-width: calc(100% + var(--gap));
}

.grid--divider--fill-y {
    --divider-y-height: calc(100% + var(--gap));
}

//////////////////////////////////////////////
// G. Gap Utilities
//////////////////////////////////////////////

.matrix {
    &[class*="gap"] {
        margin-block-start: calc(var(--gap-size) * -1);
        margin-inline-end: calc(var(--gap-size) * -0.5);
        margin-inline-start: calc(var(--gap-size) * -0.5);

        > [class*="matrix__cell"] {
            margin-block-start: var(--gap-size);
            padding-inline-start: calc(var(--gap-size) * 0.5);
            padding-inline-end: calc(var(--gap-size) * 0.5);
        }
    }
}

@each $spacer, $value in spacing.$spacers {
    .gap-#{$spacer} {
        --gap-size: #{$value};
    }
}

.gap-border {
    --gap-size: var(--default-border-width);
}

//////////////////////////////////////////////
// H. Order Utilities
//////////////////////////////////////////////

@each $breakpoint in map.keys(breakpoints.$breakpoints) {
    @include breakpoints.breakpoints-up($breakpoint) {
        $mod: breakpoints.breakpoint-modifier($breakpoint, breakpoints.$breakpoints);

        @for $i from 1 through $columns {
            .order-#{$i}#{$mod} {
                order: $i;
            }
        }
    }
}